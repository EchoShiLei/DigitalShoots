package com.digital.shoots.db.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.digital.shoots.db.greendao.bean.GameAchievement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GAME_ACHIEVEMENT".
*/
public class GameAchievementDao extends AbstractDao<GameAchievement, Long> {

    public static final String TABLENAME = "GAME_ACHIEVEMENT";

    /**
     * Properties of entity GameAchievement.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CurrentTime = new Property(0, long.class, "currentTime", true, "_id");
        public final static Property Type = new Property(1, int.class, "type", false, "type");
        public final static Property BlueScore = new Property(2, int.class, "blueScore", false, "blueScore");
        public final static Property RedScore = new Property(3, int.class, "redScore", false, "redScore");
        public final static Property Speed = new Property(4, int.class, "speed", false, "speed");
        public final static Property Day = new Property(5, String.class, "day", false, "day");
        public final static Property VideoPath = new Property(6, String.class, "videoPath", false, "VideoPath");
    }


    public GameAchievementDao(DaoConfig config) {
        super(config);
    }
    
    public GameAchievementDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GAME_ACHIEVEMENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: currentTime
                "\"type\" INTEGER NOT NULL ," + // 1: type
                "\"blueScore\" INTEGER NOT NULL ," + // 2: blueScore
                "\"redScore\" INTEGER NOT NULL ," + // 3: redScore
                "\"speed\" INTEGER NOT NULL ," + // 4: speed
                "\"day\" TEXT," + // 5: day
                "\"VideoPath\" TEXT);"); // 6: videoPath
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GAME_ACHIEVEMENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GameAchievement entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCurrentTime());
        stmt.bindLong(2, entity.getType());
        stmt.bindLong(3, entity.getBlueScore());
        stmt.bindLong(4, entity.getRedScore());
        stmt.bindLong(5, entity.getSpeed());
 
        String day = entity.getDay();
        if (day != null) {
            stmt.bindString(6, day);
        }
 
        String videoPath = entity.getVideoPath();
        if (videoPath != null) {
            stmt.bindString(7, videoPath);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GameAchievement entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCurrentTime());
        stmt.bindLong(2, entity.getType());
        stmt.bindLong(3, entity.getBlueScore());
        stmt.bindLong(4, entity.getRedScore());
        stmt.bindLong(5, entity.getSpeed());
 
        String day = entity.getDay();
        if (day != null) {
            stmt.bindString(6, day);
        }
 
        String videoPath = entity.getVideoPath();
        if (videoPath != null) {
            stmt.bindString(7, videoPath);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public GameAchievement readEntity(Cursor cursor, int offset) {
        GameAchievement entity = new GameAchievement( //
            cursor.getLong(offset + 0), // currentTime
            cursor.getInt(offset + 1), // type
            cursor.getInt(offset + 2), // blueScore
            cursor.getInt(offset + 3), // redScore
            cursor.getInt(offset + 4), // speed
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // day
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // videoPath
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GameAchievement entity, int offset) {
        entity.setCurrentTime(cursor.getLong(offset + 0));
        entity.setType(cursor.getInt(offset + 1));
        entity.setBlueScore(cursor.getInt(offset + 2));
        entity.setRedScore(cursor.getInt(offset + 3));
        entity.setSpeed(cursor.getInt(offset + 4));
        entity.setDay(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setVideoPath(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GameAchievement entity, long rowId) {
        entity.setCurrentTime(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GameAchievement entity) {
        if(entity != null) {
            return entity.getCurrentTime();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GameAchievement entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
